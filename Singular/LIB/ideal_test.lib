//this will be the ideal test thingi

proc compIds(ideal I1, ideal I2)
"
"
{
 int i1,i2,t;
 poly p;
 list R;
 ideal It;
 for (i1 = 1; i1 <= size(I1); i1++)
 {
  p = I1[i1];
  for (i2 = 1; i2 <= size(I2); i2++)
  {
   if (p==I2[i2]) {t = 1; break;}
  }
  if (t == 0) {It[size(It)+1] = p;}
  else {t = 0;}
 }
 R[1] = It;
 kill It; ideal It;
 

 
 for (i2 = 1; i2 <= size(I2); i2++)
 {
  p = I2[i2];
  for (i1 = 1; i1 <= size(I1); i1++)
  {
   if (p==I1[i1]) {t = 1; break;}
  }
  if (t == 0) {It[size(It)+1] = p;}
  else {t = 0;}
 }
 R[2] = It;
 

 return(R);
}

proc lpGbVs(ideal I)
"
"
{
 ideal I1; ideal I2;
 list R;
 I1 = letplaceGBasis(I);
 I2 = system("freegbdvc",I,attrib(basering,"uptodeg"), attrib(basering,"lV"));
 R = compIds(I1,I2);
 return(R);
}

proc itProc(list L)
"
"
{
 int i;
 list R;
 for (i=1; i <= size(L); i++)
 {
  R[size(R)+1] = lpGbVs(L[i]);
 }

 return(R);
}


/*
test:

LIB "freegb.lib";
ring r = 0,(x,y),dp;
def R = makeLetterplaceRing(10);
setring R;
ideal I = x(1)*x(2) + x(1)*y(2),y(1)*x(2);




*/

proc makeLetterplaceIdeal(ring base, ring lpRing, ideal I, int d)
"USAGE: makeLetterplaceIeal(r, R, I); r the base Ring, the letterplace
ring R was created from. I an ideal in r.
RETURN: a letterplace Ideal in R (corresponding to I)
PURPOSE: Creates an ideal in the letterplace ring R, which corresponds
to the ideal I from r. d should be the number of variables in the base
ring.
"
{
  setring lpRing;
  ideal II;

  " get list of variables in letterplac Ring
  list L = ringlist(lpRing)[2];

  int i,j,k,l;
  for (i = 1; i <= size(I); i++)
  {
    II[i] = 0;
    for(j = 1; j <= size(I[i]); j++)
    {
      l = 0;
      poly m = 1;
      def v = leadexp(I[i]);
      for(k = 1; k <= size(v); k++)
      {
        while(v[k] > 0)
        {
          m = m * L[l*d+k];
          v[k]--;
          l++;
        }
      }
      II[i] = II[i] + m;
    }
  }

  return II;
}
example
{
  "EXAMPLE:"; echo = 2;
}

proc deHomogLpIdeal(ideal I, int d, int i)
"USAGE: deHomogLpIdeal(I, i); I a Letterplace ideal, d,i Integers
RETURN:Ideal, where some Variables are replace by 1 (see PURPOSE)
PURPOSE: Dehomogenize an Ideal. i should be the index, with 
respect to the ordering of the current active ring, of the Variable 
in the Base ring we want to replace by 1 in the Letterplace ring.
d should be the number of variables in the base ring.
"
{
  i = i % d;
  list L=maxideal(1);
  int j;
  for(j=1; j<=size(L[1]); j=j+1){if(j % d == i) {L[1][j] = 1;}}
  map f=basering,L[1];
  return(simplify(f(I),2));
}
example
{
  "EXAMPLE:"; echo = 2;
  LIB "freegb.lib";
  ring r = 0,(a,x,y),dp;
  def R = makeLetterplaceRing(10);
  setring R;
  ideal I =  x(1)*x(2) + x(1)*y(2),
             x(1)*y(2)*y(3) + x(1)*x(2)*a(3),
             a(1)*x(2) - x(2)*a(1);
  deHomogLpIdeal(I,3,1);
}

proc homogLpIdeal(ideal I, def r, int d, string vname, int uptodeg)
"USAGE: homogLpIdeal(I, i); I a Letterplace ideal, d,i Integers
RETURN: homogenized letterplace Ideal and the letterplace ring, in which
this Ideal lives
PURPOSE: Homogenize an Ideal. r should be the non-letterplace basering;
vname should be the name of the new variable introduced to homogenize
ring.  d should be the number of variables in the base ring. r should be
the ring in which I lives. uptodeg should be the degree bound of the
letterplace ring.
"
{
  " Only works in characteristic 0
  " BOCO: to me: improve that (see my notes for how to do that)
  execute("ring rr = 0,"+vname+",dp;");
  def rrr = r+rr;
  setring rrr;
  def R = makeLetterplaceRing(d);
  setring R;
  kill rr;

  int i, j, k, degP;
  for (i = 1; i <= size(I); i++)
  {
    degP = deg(I[i]);
    for(j = 1; j <= size(I[i]); ++j)
    {
      for(k = deg(I[i]) + 1; k <= degP; ++k)
      {
        "Multiply new variable to each monomial of 
        "letterplace poly until it is homog
        execute("I["+i+"]["+j+"] = "+I[i][j]+"*"+vname+"("+k+")");
      }
    }
  }

  " Add commutators (our new variables shall commutate with all other
  " variables)
  ideal K;
  list L = ringlist(r);
  list VARS = L[2];
  setring rrr;
  for(i = 1; i <= size(VARS); ++i)
  {
    execute("K["+i+"] = "+VARS[i]+"*"+vname+" - "+vname+"*"+VARS[i]);
  }
  setring R;
  I = I,makeLetterplaceIdeal(rrr,R,I);


  return (I,R);
}
example
{
  "EXAMPLE:"; echo = 2;
}
